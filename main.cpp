
// Copyright (c) 2015-2019 niXman (github dot nixman dog pm dot me). All
// rights reserved.
//
// This file is part of SWITCH(https://github.com/niXman/switch) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <switch/switch.hpp>

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include <iostream>

/***************************************************************************/

TEST_CASE("test1", "[rettype is int][switch_ and case_'s key type is integral]") {
	REQUIRE(
		switch_::switch_<int>(4)
			.case_(0, 4)
			.case_(1, 3)
			.case_(2, 2)
			.case_(4, 4)
			.default_(-1) == 4
	);
	REQUIRE(
		switch_::switch_<int>(4)
			.case_(0, 4)
			.case_(1, 3)
			.case_(2, 2)
			.default_(-1) == -1
	);

	REQUIRE_THROWS(
		int v = switch_::switch_<int>(4)
			.case_(0, 4)
			.case_(1, 3)
			.case_(2, 2)
		;
		(void)v;
	);
}

TEST_CASE("test2", "[rettype is int][switch_ and case_'s key type is cstring]") {
	REQUIRE(
		switch_::switch_<int>("3")
			.case_("2", -1)
			.case_("1", -2)
			.case_("3", 0)
			.default_(-3) == 0
	);
	REQUIRE(
		switch_::switch_<int>("3")
			.case_("0", 4)
			.case_("1", 3)
			.case_("2", 2)
			.default_(-1) == -1
	);
	REQUIRE_THROWS(
		int v = switch_::switch_<int>("3")
			.case_("0", 4)
			.case_("1", 3)
			.case_("2", 2)
		;
		(void)v;
	);
}

TEST_CASE("test3", "[rettype is int][switch_ key type is std::string and case_'s key type is cstring and std::string]") {
	const std::string k("3");
	REQUIRE(
		switch_::switch_<int>(k)
			.case_("2", -1)
			.case_("1", -2)
			.case_(std::string("3"), 0)
			.default_(-3) == 0
	);
	REQUIRE(
		switch_::switch_<int>(k)
			.case_("0", 4)
			.case_(std::string("1"), 3)
			.case_("2", 2)
			.default_(-1) == -1
	);
	REQUIRE_THROWS(
		int v = switch_::switch_<int>(k)
			.case_(std::string("0"), 4)
			.case_("1", 3)
			.case_("2", 2)
		;
		(void)v;
	);
}

TEST_CASE("test4", "[rettype is std::string][switch_ and case_'s key type is integral]") {
	REQUIRE(
		switch_::switch_<std::string>(4)
			.case_(0, "4")
			.case_(1, std::string("3"))
			.case_(2, "2")
			.case_(4, std::string("4"))
			.default_(std::string("-1")) == "4"
	);
}

TEST_CASE("test5", "[rettype is std::string][lambda is used as values for case_'s]") {
	REQUIRE(
		switch_::switch_<std::string>(4)
			.case_(0, [](){return "4";})
			.case_(1, [](){return "3";})
			.case_(2, [](){return "2";})
			.case_(4, [](){return "4";})
			.default_("-1") == "4"
	);
}

TEST_CASE("test6", "[rettype is point][switch_ and case_'s key type is integral]") {
	struct point {
		int x,y;

		point(int x, int y)
			:x(x)
			,y(y)
		{}
		bool operator==(const point &r) const {
			return x == r.x && y == r.y;
		}
	};

	REQUIRE(
		switch_::switch_<point>(3)
			.case_(2, {100, 200})
			.case_(3, {200, 200})
			.default_({300, 300}) == point(200,200)
	);
}

TEST_CASE("test7", "[rettype is cstring][switch_ and case_'s key type is integral]") {
	auto r = switch_::switch_<const char*>(2)
		.case_(1, "1")
		.case_(2, "2")
		.default_("-1")
	;

	REQUIRE(
		std::strcmp(r, "2") == 0
	);
}

TEST_CASE("test8", "[rettype is cstring][switch_ and case_'s key type is cstring]") {
	auto r = switch_::switch_<const char*>("2")
		.case_("1", "1")
		.case_("2", "2")
		.default_("-1")
	;

	REQUIRE(
		std::strcmp(r, "2") == 0
	);
}

/***************************************************************************/
